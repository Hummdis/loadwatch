#!/usr/bin/env bash

# CREDIT
# Originally written by jonathonrox24 (https://github.com/jonathonrox24)
# Udated by Hummdis (hummdis.com).

# LICENSE
# Released under the Apache License 2.0.

####
# LoadWatch - A more lightweight version of Sys-Snap and only triggers when the load is higher than expected or wanted.
#
#
# INSTALLATION
#
# 1. Run the following command, as Root:
#
# mkdir -p ~/loadwatch; wget -O ~/loadwatch/loadwatch https://raw.githubusercontent.com/Hummdis/loadwatch/master/loadwatch && chmod +x ~/loadwatch/loadwatch
#
# 2. Install facter
#
#  Please install it with the proper package manager for your distribution:
#       Arch Linux, Manjaro Linux: sudo pacman -S facter
#       Fedora: sudo dnf install facter
#       CentOS, RHEL: sudo yum install epel-release && sudo yum install facter
#       openSUSE: sudo zypper install facter
#
# 3. Create the following CRON entry in Root's crontab:
#
# */1 * * * * /root/loadwatch/loadwatch
#
# 4. You're done.  It'll run every minute and the defaults are to record the system state if the load is above the default of 50% of the CPU maximum ability.
#    If the server is a virtual machine (i.e. VPS), then the maximum load is 16 with a reported load of 8 or higher. This can be overridden, of course.
#    It then cleans up any old log files older than 14 days.
#
# CONFIGURATION
#
# Set the THRESH and RETEN variables at the top of the file to the desired numbers to override the defaults.
####

# Change these two variables to override the defaults.
# Load Threshold for doing a dump. Default is 50% of CPU for physical servers and a load average of 8 for virtual servers.
THRESH=
# Retention duration of log files. Default is 14 days.
RETEN=

########################################################################
# NO MORE CHANGES BELOW THIS POINT, UNLESS YOU KNOW WHAT YOU'RE DOING. #
########################################################################

# Variables
VERSION=1.1.6
DATE=$(date +%F.%H%M)
LOAD=$(cat /proc/loadavg | awk '{print $1}')
FILE=loadwatch_$DATE_Load.$LOAD
DIR=/root/loadwatch
LOG=checklog
DIVIDER="=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-="

# Make sure our operating directory exists.  By default, this file runs from within this directory, but is not required.
if [ ! -d $DIR ]; then
    mkdir -p $DIR
fi

# Gather the system stats and put them into the log.
dump_stats() {
    echo -e "\tALERT: Loadwatch Triggered! - $DATE - Load: ($LOAD) - Log: $DIR/$FILE" >> $DIR/$LOG
    echo -e "=-=-=-=-=-=    BEGIN LOADWATCH REPORT - ${VERSION}  =-=-=-=-=-=\n" > $DIR/$FILE
	echo $DATE >> $DIR/$FILE
	echo $LOAD >> $DIR/$FILE
    echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "FREE RAM" >> $DIR/$FILE
	free -m >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "MySQL PROCCESS LIST" >> $DIR/$FILE
    mysqladmin processlist stat >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "APACHE STATUS" >> $DIR/$FILE
    /usr/sbin/apachectl fullstatus >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "NETSTAT DETAILS" >> $DIR/$FILE
    netstat -tn 2>/dev/null | grep :80 | awk '{print $5}' | cut -d: -f1 | sort | uniq -c | sort -nr | head >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "TOP STATUS" >> $DIR/$FILE
    top -bcn1 >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "PROCESS LIST" >> $DIR/$FILE
    ps auxf >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "EXIM STATS" >> $DIR/$FILE
    /usr/sbin/exiwhat >> $DIR/$FILE
	echo -e "\n${DIVIDER}\n" >> $DIR/$FILE
	echo "IOSTAT DETAILS" >> $DIR/$FILE
    iostat >> $DIR/$FILE
	echo -e "\n=-=-=-=-=-=   END OF REPORT   =-=-=-=-=-=" >> $DIR/$FILE
}

# Perform cleanup. Check if the user has set a value. If not, default to 14.
cleanup_files() {
    if [ -z "$RETEN" ]; then
        RETEN=14
    fi
    cd $DIR
    find . -name loadwatch_* -mtime +$RETEN -exec rm -f {} \;
	
	# Rotate the 'checklog' file every 24 hours and compress it.  Then, delete any older than the retention period.
	LINES=$(cat $DIR/checklog | wc -l)
	if [ $(date +%H%M) == 0000 && $LINES > 5 ]; then
		NEWLOG=$DIR/$LOG.$(date -d "yesterday" +%Y-%m-%d)
		mv $LOG $NEWLOG
		touch $LOG
		gzip -f -9 $NEWLOG
	fi
	cd $DIR
	find . -name checklog.* -mtime +$RETEN -exec rm -f {} \;
}

# Check for facter, needed to determine if system is physical or virtual. Abort if it's missing.
facter_check() {
	facter > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "Facter is not installed. Please install it with the proper package manager for your distribution:"
		echo -e "\tsudo pacman -S facter"
		echo -e "\tsudo dnf install facter"
		echo -e "\tyum install epel-release && yum install fracter"
		echo -e "\tzypper install facter"
		echo -e "\n\nExiting."
		exit 1
	fi
}

# Perform the actual virtual machine check
virtual_check() {
	facter_check
    if [ $(facter | grep is_virtual | awk '{print $3}') == 'true' ]; then
        return 0 # True
    else
        return 1 # False
    fi
}

# See if the system can run the lscpu command.
lscpu_check() {
	lscpu > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		return 0 # True
	else
		return 1 # False
	fi
}

# Main process.
main() {
	echo "Loadwatch check: ${DATE} - Load: ${LOAD}" >> $DIR/checklog
	if [ -z "$THRESH" ]; then
		if [ virtual_check ]; then
			MAX=16
		elif [ lscpu_check ]; then
			MAX=$(lscpu | grep "per socket:" | awk '{print $4}')
		else
			MAX=$(cat /proc/cpuinfo | grep "cpu cores" | tail -1 | awk '{print $4}')
		fi
		THRESH=$(expr $MAX / 2)
	fi
	# Changing this actually allows comparison of decimal numbers.
	if (( $(echo "$LOAD > $THRESH" | bc -l) )); then
		dump_stats
		cleanup_files
	fi
}

main

exit 0
